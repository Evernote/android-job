apply plugin: 'maven'
apply plugin: 'signing'

@SuppressWarnings(["GrMethodMayBeStatic", "GroovyUnusedDeclaration"])
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def isLocal() {
    return hasProperty('local') ? Boolean.parseBoolean(getProperty('local')) : true
}

def getReleaseRepositoryUrl() {
    if (this.isLocal()) {
        return hasProperty('RELEASE_REPOSITORY_LOCAL') ? RELEASE_REPOSITORY_LOCAL : "file://${System.env.HOME}/.m2/repository"
    } else {
        return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    }
}

def getSnapshotRepositoryUrl() {
    if (this.isLocal()) {
        return hasProperty('SNAPSHOT_REPOSITORY_LOCAL') ? SNAPSHOT_REPOSITORY_LOCAL : "file://${System.env.HOME}/.m2/repository"
    } else {
        return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_USERNAME') ? SONATYPE_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_PASSWORD') ? SONATYPE_PASSWORD : ""
}

android.libraryVariants.all { variant ->
    variant.outputs.each { output ->
        File outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.aar') && 'release'.equals(variant.buildType.name)) {
            def fileName = "${project.archivesBaseName}-${version}.aar"
            output.outputFileName = new File(outputFile.parent, fileName)
        }
    }
}

version = VERSION_NAME

artifacts {
    archives file("$buildDir/outputs/jar/${project.archivesBaseName}-${project.version}-sources.jar")
    archives file("$buildDir/outputs/jar/${project.archivesBaseName}-${project.version}-javadoc.jar")
}

afterEvaluate { project ->
    uploadArchives {
        //noinspection GradleMisplacedStatement
        repositories {
            //noinspection GroovyAssignabilityCheck
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = 'com.evernote'
                pom.artifactId = 'android-job'
                pom.version = VERSION_NAME

                repository(url: this.getReleaseRepositoryUrl()) {
                    authentication(userName: this.getRepositoryUsername(), password: this.getRepositoryPassword())
                }
                snapshotRepository(url: this.getSnapshotRepositoryUrl()) {
                    authentication(userName: this.getRepositoryUsername(), password: this.getRepositoryPassword())
                }

                pom.project {
                    name 'Android-Job'
                    packaging 'aar'
                    description 'Android library to handle jobs in the background.'
                    url 'https://github.com/evernote/android-job'
                    inceptionYear '2015'

                    scm {
                        url 'https://github.com/evernote/android-job'
                        connection 'scm:git:git://github.com/evernote/android-job.git'
                        developerConnection 'scm:git:git@github.com:evernote/android-job.git'
                    }

                    developers {
                        developer {
                            name 'Ralf Wondratschek'
                            email 'rwondratschek@evernote.com'
                            id 'rwondratschek'
                            url 'http://vrallev.net'
                            timezone '+1'
                            roles {
                                role 'developer'
                            }
                        }
                    }

                    licenses {
                        license {
                            name 'Apache License version 2.0'
                            url 'https://github.com/evernote/android-job/blob/master/LICENSE'
                            distribution 'repo'
                        }
                    }

                    issueManagement {
                        system 'GitHub Issues'
                        url 'https://github.com/evernote/android-job/issues'
                    }
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

project.tasks.whenTaskAdded { task ->
    if (task.name == 'signArchives') {
        this.addSourcesAndJavadocTask task
    }
}

def addSourcesAndJavadocTask(Task uploadTask) {
    android.libraryVariants.all { variant ->
        if (variant.name.equalsIgnoreCase('release')) {
            uploadTask.dependsOn project.tasks.getByName("assemble${variant.name.capitalize()}")
            uploadTask.dependsOn project.tasks.getByName("generate${variant.name.capitalize()}JavadocJar")
            uploadTask.dependsOn project.tasks.getByName("generate${variant.name.capitalize()}SourcesJar")
        }
    }
}

// javadoc jar
android.libraryVariants.all { variant ->
    project.task("${variant.name.capitalize()}Javadoc", type: Javadoc) {
        failOnError true

        destinationDir = new File("$project.buildDir/javadoc/$variant.name")

        source = variant.javaCompile.source

        ext.androidJar = "${project.android.sdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"
        classpath += project.files(variant.javaCompile.classpath.files) + project.files(ext.androidJar)
        classpath += files("$buildDir/generated/source/r/${variant.name}/")
        classpath += files("$buildDir/generated/source/buildConfig/${variant.name}/")

        options {
            linksOffline("http://d.android.com/reference", "${project.android.sdkDirectory}/docs/reference")
            links("http://docs.oracle.com/javase/7/docs/api/")
            setMemberLevel(JavadocMemberLevel.PACKAGE)
            addStringOption('Xdoclint:none', '-quiet')
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    project.task("generate${variant.name.capitalize()}JavadocJar", type: Jar, dependsOn: "${variant.name.capitalize()}Javadoc") {
        classifier 'javadoc'

        description = 'Assembles a jar archive containing the generated Javadoc API documentation of $variant.name.'

        destinationDir = new File("$project.buildDir/outputs/jar/")

        exclude '**/BuildConfig.class'
        exclude '**/R.class'

        from "$project.buildDir/javadoc/$variant.name"
    }
}

// sources jar
android.libraryVariants.all { variant ->
    project.task("generate${variant.name.capitalize()}SourcesJar", type: Jar) {
        classifier = 'sources'

        description = 'Assembles a jar archive containing the main sources of $variant.name..'

        destinationDir = new File("$project.buildDir/outputs/jar/")

        // exclude generated files
        exclude '**/BuildConfig.java'
        exclude '**/R.java'

        from variant.javaCompile.source
    }
}